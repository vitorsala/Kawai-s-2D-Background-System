using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEditor;[CustomEditor(typeof(Background))]public class BackgroundEditor : Editor {    Background current;    private void OnEnable() {        current = (Background)target;        // When editing an background, I want to check if ther is any layer that doesn't have        // the right component.        Transform currentTransform = current.gameObject.transform;        for(int i = 0; i < currentTransform.childCount; i++) {            GameObject child = currentTransform.GetChild(i).gameObject;            if(child.GetComponent<BackgroundLayer>() == null) {                DestroyImmediate(child);            }        }    }    private void OnDisable() {        // Sanity check        current = null;    }    public override void OnInspectorGUI() {        EditorGUILayout.BeginVertical();
        EditorGUI.BeginChangeCheck();        bool sel = EditorGUILayout.ToggleLeft("Horizontal Camera Movement Allowed", current.cameraCanMoveHorizontally);        if(EditorGUI.EndChangeCheck()) {            Undo.RecordObject(current, "Background: Horizontal Camera Movement Allowed changed");            current.cameraCanMoveHorizontally = sel;        }

        if(!current.cameraCanMoveHorizontally) {
            EditorGUI.BeginChangeCheck();            float newSpeed = EditorGUILayout.FloatField("Horizontal Speed", current.horizontalSpeed);            if(EditorGUI.EndChangeCheck()) {                Undo.RecordObject(current, "Background: Horizontal Speed changed");                current.horizontalSpeed = newSpeed;            }
        }

        EditorGUI.BeginChangeCheck();        sel = EditorGUILayout.ToggleLeft("Vertical Camera Movement Allowed", current.cameraCanMoveVertically);        if(EditorGUI.EndChangeCheck()) {            Undo.RecordObject(current, "Background: Vertical Camera Movement Allowed changed");            current.cameraCanMoveVertically = sel;        }        if(!current.cameraCanMoveVertically) {
            EditorGUI.BeginChangeCheck();            float newSpeed = EditorGUILayout.FloatField("Vertical Speed", current.verticalSpeed);            if(EditorGUI.EndChangeCheck()) {                Undo.RecordObject(current, "Background: Vertical Speed changed");                current.verticalSpeed = newSpeed;            }
        }        EditorGUILayout.Separator();        EditorGUILayout.LabelField("Number of Layers: " + current.transform.childCount);        if(GUILayout.Button("Add New Layer")) {            Undo.RecordObject(current, "Background: Layer added");            GameObject go = new GameObject("Layer " + (current.transform.childCount + 1));            go.transform.SetParent(current.gameObject.transform);            go.AddComponent<BackgroundLayer>();        }        EditorGUILayout.EndVertical();    }}